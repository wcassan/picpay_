#!/usr/bin/env python3
"""
Exemplo de uso da API Flask - CRUD de Usu√°rios
Demonstra como usar todos os endpoints da API
"""

import requests
import json

# URL base da API
BASE_URL = "http://localhost:5000"

def test_api():
    """Testa todos os endpoints da API"""
    
    print("üöÄ Testando API Flask - CRUD de Usu√°rios")
    print("=" * 50)
    
    # 1. GET /users - Listar todos os usu√°rios
    print("\n1. üìã Listando todos os usu√°rios:")
    response = requests.get(f"{BASE_URL}/users")
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 2. POST /users - Criar novo usu√°rio
    print("\n2. ‚ûï Criando novo usu√°rio:")
    new_user = {
        "name": "Teste API",
        "email": "teste.api@email.com",
        "age": 25
    }
    response = requests.post(f"{BASE_URL}/users", json=new_user)
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    if response.status_code == 201:
        user_id = response.json()['data']['id']
        
        # 3. GET /users/{id} - Buscar usu√°rio espec√≠fico
        print(f"\n3. üîç Buscando usu√°rio ID {user_id}:")
        response = requests.get(f"{BASE_URL}/users/{user_id}")
        print(f"Status: {response.status_code}")
        print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        # 4. PUT /users/{id} - Atualizar usu√°rio
        print(f"\n4. ‚úèÔ∏è Atualizando usu√°rio ID {user_id}:")
        update_data = {
            "name": "Teste API Atualizado",
            "age": 26
        }
        response = requests.put(f"{BASE_URL}/users/{user_id}", json=update_data)
        print(f"Status: {response.status_code}")
        print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        
        # 5. DELETE /users/{id} - Remover usu√°rio
        print(f"\n5. üóëÔ∏è Removendo usu√°rio ID {user_id}:")
        response = requests.delete(f"{BASE_URL}/users/{user_id}")
        print(f"Status: {response.status_code}")
        print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 6. Teste de valida√ß√£o - Email duplicado
    print("\n6. ‚ö†Ô∏è Testando valida√ß√£o - Email duplicado:")
    duplicate_user = {
        "name": "Usu√°rio Duplicado",
        "email": "joao.silva@email.com",  # Email que j√° existe
        "age": 30
    }
    response = requests.post(f"{BASE_URL}/users", json=duplicate_user)
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 7. Teste de valida√ß√£o - Dados inv√°lidos
    print("\n7. ‚ö†Ô∏è Testando valida√ß√£o - Dados inv√°lidos:")
    invalid_user = {
        "name": "",  # Nome vazio
        "email": "email-invalido"  # Email sem @
    }
    response = requests.post(f"{BASE_URL}/users", json=invalid_user)
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    # 8. Teste de erro - Usu√°rio n√£o encontrado
    print("\n8. ‚ùå Testando erro - Usu√°rio n√£o encontrado:")
    response = requests.get(f"{BASE_URL}/users/999")
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    
    print("\n‚úÖ Testes conclu√≠dos!")
    print("\nüí° Para executar este exemplo:")
    print("1. Certifique-se de que a aplica√ß√£o est√° rodando: python app.py")
    print("2. Execute este script: python example_api_usage.py")

if __name__ == "__main__":
    try:
        test_api()
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar √† API.")
        print("üí° Certifique-se de que a aplica√ß√£o Flask est√° rodando em http://localhost:5000")
        print("   Execute: python app.py")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
